#!/bin/bash

# This performs a more-or-less graceful restart of zope clients.
# Strategy: For each client,
#   1) Mark it down for maintenance in haproxy;
#   2) stop client;
#   3) start client; wait long enough for it to start listening
#   4) Fetch the homepage directly from the client to load the cache.
#      This will be the first request the client receives,
#      since haproxy hasn't have marked it live yet.
#      So, when haproxy marks it live, the cache will be warm.
#   5) Mark the client available in haproxy.
#
#   Please regard this script as experimental. Before use, read it and make
#   sure it's reasonable for your situation.
#
#   This script is meant to be run as root as it needs access to supervisor
#   and the haproxy socket.

{% for client in range(0, item.plone_client_count|default(plone_client_count)|int) %}

{% if install_loadbalancer %}
echo "Marking client {{ client + 1 }} down for maintenance"
echo "disable server {{ item.plone_instance_name|default(plone_instance_name) }}/client{{ client + 1 }}" | socat /var/run/haproxy.sock stdio > /dev/null
{% endif %}
echo Restarting client {{ client + 1 }}
supervisorctl stop {{ item.plone_instance_name|default(plone_instance_name) }}_zeoclient{{ client + 1 }}
echo Waiting a bit...
sleep 20
supervisorctl start {{ item.plone_instance_name|default(plone_instance_name) }}_zeoclient{{ client + 1 }}
echo Waiting a bit...
sleep 30
{% for vhost in item.webserver_virtualhosts %}
{% if vhost.zodb_path is defined %}
echo Fetching Plone site-home page
curl http://localhost:{{ item.plone_client_base_port|default(plone_client_base_port)|int + client }}{{ vhost.zodb_path }} -s -o - > /dev/null
{% endif %}
{% if install_loadbalancer %}
echo "Marking client {{ client + 1 }} available"
echo "enable server {{ item.plone_instance_name|default(plone_instance_name) }}/client{{ client + 1 }}" | socat /var/run/haproxy.sock stdio > /dev/null
{% endif %}
{% endfor %}

{% if client + 1 < item.plone_client_count|default(plone_client_count) %}
echo
echo "Waiting between clients"
sleep 60
echo
{% endif %}

{% endfor %}

{% if install_proxycache %}
{% for vhost in item.webserver_virtualhosts %}
echo Purging varnish cache for {{ vhost.hostname }}
{% if vhost.get('protocol', 'http') == 'https' %}
varnishadm "ban req.url ~ /VirtualHostBase/https/{{ vhost.hostname }}:{{ vhost.port|default('443') }}{{ vhost.zodb_path }}/VirtualHostRoot/"
{% else %}
varnishadm "ban req.url ~ /VirtualHostBase/http/{{ vhost.hostname }}:{{ vhost.port|default('80') }}{{ vhost.zodb_path }}/VirtualHostRoot/"
{% endif %}
{% endfor %}
{% endif %}

echo Done
